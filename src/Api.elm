module Api exposing (Cred, get, login)

{-| This module exposes wrappers around Http methods
-}

import Api.Endpoint as Endpoint exposing (Endpoint)
import Http exposing (Body, Header)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (required)
import Json.Encode as Encode
import RemoteData as RD exposing (WebData)



-- CRED


{-| The authentication credentials for the Viewer.

This includes:

  - The JWT generated by FF

By design, there is no way to access the token directly as a String.

NOTE: This token should never be rendered to the end user.

-}
type Cred
    = Cred String


token : Cred -> String
token (Cred val) =
    val


credHeader : Cred -> Header
credHeader cred =
    Http.header "authorization" ("Bearer " ++ token cred)


{-| Do not expose this!

This ensures that if anyone ever has access to a
`Cred` value, we know it came from the auth API endpoint.

-}
authDecoder : Decoder Cred
authDecoder =
    let
        decoder : Decoder Cred
        decoder =
            Decode.succeed Cred
                |> required "accessToken" Decode.string
    in
    Decode.at [ "data" ] decoder



-- HTTP


get : Endpoint -> Maybe Cred -> (WebData a -> msg) -> Decoder a -> Cmd msg
get url maybeCred toMsg decoder =
    Endpoint.request
        { body = Http.emptyBody
        , expect = Http.expectJson (RD.fromResult >> toMsg) decoder
        , headers =
            case maybeCred of
                Just cred ->
                    [ credHeader cred ]

                Nothing ->
                    []
        , method = "GET"
        , timeout = Nothing
        , tracker = Nothing
        , url = url
        }


post : Endpoint -> Maybe Cred -> Body -> (WebData a -> msg) -> Decoder a -> Cmd msg
post url maybeCred body toMsg decoder =
    Endpoint.request
        { body = body
        , expect = Http.expectJson (RD.fromResult >> toMsg) decoder
        , headers =
            case maybeCred of
                Just cred ->
                    [ credHeader cred ]

                Nothing ->
                    []
        , method = "POST"
        , timeout = Nothing
        , tracker = Nothing
        , url = url
        }


login : String -> String -> (WebData Cred -> msg) -> Cmd msg
login clientId secretKey toMsg =
    let
        jsonBody : Body
        jsonBody =
            Encode.object
                [ ( "clientId", Encode.string clientId )
                , ( "secret", Encode.string secretKey )
                ]
                |> Http.jsonBody
    in
    post Endpoint.auth Nothing jsonBody toMsg authDecoder

module Api exposing (Cred, get, login, storageDecoder)

{-| This module exposes wrappers around Http methods
-}

import Api.Endpoint as Endpoint
import Http
import Json.Decode as D
import Json.Decode.Pipeline exposing (required)
import Json.Encode as E
import RemoteData as RD
import TsJson.Decode as TsDecode



-- CRED


{-| The authentication credentials for the Viewer.

This includes:

  - The JWT generated by Flatfile

By design, there is no way to access the token directly as a String.

NOTE: This token should never be rendered to the end user.

-}
type Cred
    = Cred String


token : Cred -> String
token (Cred val) =
    val


credHeader : Cred -> Http.Header
credHeader cred =
    Http.header "authorization" ("Bearer " ++ token cred)


{-| Do not expose this!

This ensures that if anyone ever has access to a `Cred` value,
we know it came from the auth API endpoint.

-}
credDecoder : D.Decoder Cred
credDecoder =
    D.at [ "data" ]
        (D.succeed Cred
            |> required "accessToken" D.string
        )


storageDecoder : TsDecode.Decoder Cred
storageDecoder =
    TsDecode.map Cred TsDecode.string



-- HTTP


get :
    Endpoint.Endpoint
    -> Maybe Cred
    -> (RD.WebData a -> msg)
    -> D.Decoder a
    -> Cmd msg
get url maybeCred toMsg decoder =
    Endpoint.request
        { body = Http.emptyBody
        , expect = Http.expectJson (RD.fromResult >> toMsg) decoder
        , headers =
            case maybeCred of
                Just cred ->
                    [ credHeader cred ]

                Nothing ->
                    []
        , method = "GET"
        , timeout = Nothing
        , tracker = Nothing
        , url = url
        }


post :
    Endpoint.Endpoint
    -> Maybe Cred
    -> Http.Body
    -> (RD.WebData a -> msg)
    -> D.Decoder a
    -> Cmd msg
post url maybeCred body toMsg decoder =
    Endpoint.request
        { body = body
        , expect = Http.expectJson (RD.fromResult >> toMsg) decoder
        , headers =
            case maybeCred of
                Just cred ->
                    [ credHeader cred ]

                Nothing ->
                    []
        , method = "POST"
        , timeout = Nothing
        , tracker = Nothing
        , url = url
        }


login :
    String
    -> String
    -> (RD.WebData Cred -> msg)
    -> Cmd msg
login clientId secretKey toMsg =
    let
        jsonBody : Http.Body
        jsonBody =
            E.object
                [ ( "clientId", E.string clientId )
                , ( "secret", E.string secretKey )
                ]
                |> Http.jsonBody
    in
    post Endpoint.auth Nothing jsonBody toMsg credDecoder
